/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.marcovalderrey.mycompany.test_dgt;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

/**
 *
 * @author valde
 */
public class FRAME_test extends javax.swing.JFrame {
    
    PANEL_Principal panelPrincipal;
    PANEL_Preguntas panelPreguntas = new PANEL_Preguntas();
    PANEL_Resultados panelResultados = new PANEL_Resultados();
    
    ArrayList<Pregunta> listaPreguntas = new ArrayList();
    ArrayList<Respuesta> listaRespuestas = new ArrayList();
    
    Respuesta arrayRespuestas[];
    Pregunta arrayPreguntas[];
    
    int indicePregunta = 0;
    int numeroDePreguntas = 0;
    
    boolean finalizar = false;
    
    public FRAME_test() {
        initComponents();
        panelPrincipal = new PANEL_Principal();
        panelPrincipal.setVisible(true);
        panelControlador.add(panelPrincipal);
        btnAnterior.setVisible(false);
        btnPosterior.setVisible(false);
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAvisoIniciarTest = new javax.swing.JLabel();
        panelControlador = new javax.swing.JPanel();
        pnlBotones = new javax.swing.JPanel();
        btnAnterior = new javax.swing.JButton();
        btnTest = new javax.swing.JButton();
        btnPosterior = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        jMenuEdicion = new javax.swing.JMenu();
        menuAdministrador = new javax.swing.JMenuItem();
        menuDesactivarAdmin = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblAvisoIniciarTest.setForeground(new java.awt.Color(255, 0, 0));
        lblAvisoIniciarTest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        panelControlador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panelControladorMouseEntered(evt);
            }
        });
        panelControlador.setLayout(new java.awt.GridBagLayout());

        pnlBotones.setLayout(new java.awt.GridLayout(1, 0));

        btnAnterior.setText("<---");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });
        pnlBotones.add(btnAnterior);

        btnTest.setText("INICIAR TEST");
        btnTest.setToolTipText("");
        btnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestActionPerformed(evt);
            }
        });
        pnlBotones.add(btnTest);

        btnPosterior.setText("--->");
        btnPosterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPosteriorActionPerformed(evt);
            }
        });
        pnlBotones.add(btnPosterior);

        jMenuEdicion.setText("Edici√≥n...");

        menuAdministrador.setText("Activar modo Admin...");
        menuAdministrador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAdministradorActionPerformed(evt);
            }
        });
        jMenuEdicion.add(menuAdministrador);

        menuDesactivarAdmin.setText("Desactivar modo Admin.");
        menuDesactivarAdmin.setEnabled(false);
        menuDesactivarAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDesactivarAdminActionPerformed(evt);
            }
        });
        jMenuEdicion.add(menuDesactivarAdmin);

        menuBar.add(jMenuEdicion);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelControlador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblAvisoIniciarTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(panelControlador, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(lblAvisoIniciarTest, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestActionPerformed
        if(btnTest.getText().equals("INICIAR TEST")){
            
            if(!panelPrincipal.comprobarContenidoCampos()){

                panelPrincipal.setVisible(false);
                btnTest.setText("FINALIZAR TEST");
                btnAnterior.setVisible(true);
                btnPosterior.setVisible(true);
                panelControlador.add(panelPreguntas);

                mostrarPrimeraPregunta(panelPrincipal.getTipoTest());
                desactivarModoAdmin();
                menuAdministrador.setEnabled(false);

            }else{
                lblAvisoIniciarTest.setText("Se deben de rellenar todos datos personales");
            }
        }
        else if(btnTest.getText().equals("FINALIZAR TEST")){

            if(mostrarDialogoFinalizarTest()){
                cambiarRespuesta();
                panelPreguntas.setVisible(false);
                listaRespuestasAJson();
                mostrarPanelResultados();

                btnTest.setText("VOLVER A INICIO");
                btnAnterior.setVisible(false);
                btnPosterior.setVisible(false);
                menuAdministrador.setEnabled(true);
                btnTest.setEnabled(false);
            }
            
        }
        else if(btnTest.getText().equals("VOLVER A INICIO")){
            
            panelResultados.setVisible(false);
            panelPrincipal = new PANEL_Principal();
            panelPreguntas = new PANEL_Preguntas();
            panelResultados = new PANEL_Resultados();
            listaPreguntas = new ArrayList();
            listaRespuestas = new ArrayList();
            
            panelControlador.add(panelPrincipal);
            panelPrincipal.habilitarCaracteristicasTest(true);
            menuDesactivarAdmin.setEnabled(true);
            menuAdministrador.setEnabled(false);
            
            btnTest.setText("INICIAR TEST");
            
            
        }
    }//GEN-LAST:event_btnTestActionPerformed

    private void menuAdministradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAdministradorActionPerformed
        
        mostrarDialogoAdministrador();
        
    }//GEN-LAST:event_menuAdministradorActionPerformed

    private void btnPosteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPosteriorActionPerformed
        cambiarRespuesta();
        if(indicePregunta + 1 > numeroDePreguntas - 1){
            indicePregunta = 0;
        }else{
            indicePregunta += 1;
        }
        panelPreguntas.mostrarXPregunta(indicePregunta);
        panelPreguntas.setNumeroPregunta(indicePregunta + 1 + ".");
        guardarOpcionMarcada();
    }//GEN-LAST:event_btnPosteriorActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        cambiarRespuesta();
        
        if(indicePregunta - 1 < 0){
            indicePregunta = numeroDePreguntas - 1;
        }else{
            indicePregunta -= 1;
        }
        panelPreguntas.mostrarXPregunta(indicePregunta);
        panelPreguntas.setNumeroPregunta(indicePregunta + 1 + ".");
        guardarOpcionMarcada();
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void menuDesactivarAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDesactivarAdminActionPerformed
        desactivarModoAdmin();
    }//GEN-LAST:event_menuDesactivarAdminActionPerformed

    private void panelControladorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelControladorMouseEntered
        lblAvisoIniciarTest.setText("");
    }//GEN-LAST:event_panelControladorMouseEntered

    void desactivarModoAdmin(){
        panelPrincipal.habilitarCaracteristicasTest(false);
        menuDesactivarAdmin.setEnabled(false);
        menuAdministrador.setEnabled(true);
        panelResultados.activarBotonInformes(false);
    }
    
    void mostrarDialogoAdministrador(){
        
        DIALOG_Administrador admin = new DIALOG_Administrador(this, true);
        
        admin.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                if(admin.getContrase√±aCorrecta()){
        
                    if(panelPrincipal.isVisible()){
                        panelPrincipal.habilitarCaracteristicasTest(true);
                        menuDesactivarAdmin.setEnabled(true);
                        menuAdministrador.setEnabled(false);
                    }
                    if(panelResultados.isVisible()){
                        btnTest.setEnabled(true);
                        panelResultados.activarBotonInformes(true);
                    }
                    
                }
            }
        });
        
        admin.setVisible(true);
    
    }
    
    boolean mostrarDialogoFinalizarTest(){
        
        finalizar = true;
        
        DIALOG_FinalizarTest finalTest = new DIALOG_FinalizarTest(this, true);
        
        finalTest.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                finalizar = false;
            }
        });
        
        finalTest.setVisible(true);
        
        return finalizar;
    
    }
    
    String buscarOpcionMarcada(String opcion){
        String posicionOpcion = "Ninguna";
        
        if((listaPreguntas.get(indicePregunta).getRespuestaA() + listaPreguntas.get(indicePregunta).getRespuestaAAbajo()).equals(opcion)){posicionOpcion = "A";}
        else if((listaPreguntas.get(indicePregunta).getRespuestaB() + listaPreguntas.get(indicePregunta).getRespuestaBAbajo()).equals(opcion)){posicionOpcion = "B";}
        else if((listaPreguntas.get(indicePregunta).getRespuestaC() + listaPreguntas.get(indicePregunta).getRespuestaCAbajo()).equals(opcion)){posicionOpcion = "C";}
        else if((listaPreguntas.get(indicePregunta).getRespuestaD() + listaPreguntas.get(indicePregunta).getRespuestaDAbajo()).equals(opcion)){posicionOpcion = "D";}
        
        
        return posicionOpcion;
    }
    
    void guardarOpcionMarcada(){
        String opcionMarcada = listaRespuestas.get(indicePregunta).getRespuestaDada();
        panelPreguntas.marcarOpcion(buscarOpcionMarcada(opcionMarcada));
    }
    
    void mostrarPrimeraPregunta(String nombreArchivo){
    
        try {
            // create object mapper instance
            ObjectMapper mapper = new ObjectMapper();

            // convert JSON array to list of books
            File file = new File("preguntas\\" + nombreArchivo + ".json");
            final ObjectMapper objectMapper = new ObjectMapper();
            List<Pregunta> langList = objectMapper.readValue(file, new TypeReference<List<Pregunta>>(){});

            numeroDePreguntas = panelPrincipal.getNumPreguntas();
            for(int i = 0; i < numeroDePreguntas;i++){
                listaPreguntas.add(langList.get(i));
            }
            
            listaPreguntas = desordenarArrayPreguntas();
            arrayRespuestas = new Respuesta[numeroDePreguntas];
            
            for(int i = 0;i < numeroDePreguntas;i++){
                Respuesta respuesta;
                String pregunta = listaPreguntas.get(i).getPregunta();
                String respuestaDada = "Ninguna";
                String respuestaCorrecta = listaPreguntas.get(i).getRespuestaCorrecta();
                respuesta = new Respuesta(pregunta, respuestaDada, respuestaCorrecta);
                listaRespuestas.add(respuesta);
            }

            ArrayList<Pregunta> temporal = new ArrayList();
            for(int i = 0;i<listaPreguntas.size();i++){
            
                temporal.add(panelPreguntas.desordenarRespuestas(listaPreguntas.get(i)));
                
            }
            listaPreguntas = temporal;
            panelPreguntas.almacenarPreguntas(listaPreguntas);
            
            panelPreguntas.dividirCadenasLargasArrayList();
            panelPreguntas.mostrarXPregunta(indicePregunta);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    
    }
    
    void cambiarRespuesta(){
        
        if(panelPreguntas.getOpcionSelecionada().equals("A")){
            listaRespuestas.get(indicePregunta).setRespuestaDada(listaPreguntas.get(indicePregunta).getRespuestaA() + listaPreguntas.get(indicePregunta).getRespuestaAAbajo());
        }else if(panelPreguntas.getOpcionSelecionada().equals("B")){
            listaRespuestas.get(indicePregunta).setRespuestaDada(listaPreguntas.get(indicePregunta).getRespuestaB() + listaPreguntas.get(indicePregunta).getRespuestaBAbajo());
        }else if(panelPreguntas.getOpcionSelecionada().equals("C")){
            listaRespuestas.get(indicePregunta).setRespuestaDada(listaPreguntas.get(indicePregunta).getRespuestaC() + listaPreguntas.get(indicePregunta).getRespuestaCAbajo());
        }else if(panelPreguntas.getOpcionSelecionada().equals("D")){
            listaRespuestas.get(indicePregunta).setRespuestaDada(listaPreguntas.get(indicePregunta).getRespuestaD() + listaPreguntas.get(indicePregunta).getRespuestaDAbajo());
        }else{
            listaRespuestas.get(indicePregunta).setRespuestaDada("Ninguna");
        }
        panelPreguntas.quitarSeleccion();
        
    }
    
    void listaRespuestasAJson(){
    
        try {
            // create books list
            arrayRespuestas = listaRespuestas.toArray(arrayRespuestas);
            
            List<Respuesta> listaResp = Arrays.asList(arrayRespuestas);

            // create object mapper instance
            ObjectMapper mapper = new ObjectMapper();

            // convert books object to JSON file
            mapper.writeValue(Paths.get("resultados\\" + panelPrincipal.getTipoTest() + "resultado.json").toFile(), listaResp);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    void mostrarPanelResultados(){
    
        panelResultados.setVisible(true);
        panelControlador.add(panelResultados);
        String nombreYApellidos = panelPrincipal.getNombre() + " " + panelPrincipal.getApellidos();
        String dni = panelPrincipal.getDni();
        String tipoTest = panelPrincipal.getTipoTest();
        String numPreguntas = String.valueOf(panelPrincipal.getNumPreguntas());
        String pregContestadas = String.valueOf(getPreguntasContestadas());
        panelResultados.rellenarCampos(nombreYApellidos, dni, tipoTest, numPreguntas, pregContestadas);
        panelResultados.rellenarBeanInformes(panelPrincipal.getNombre() + " " + panelPrincipal.getApellidos(), panelPrincipal.getDni(), panelPrincipal.getTipoTest()
                , String.valueOf(panelPrincipal.getFallosMaximos()), String.valueOf(getPreguntasFalladas()));
    
    }
    
    int getPreguntasContestadas(){
        int preguntasContestadas = numeroDePreguntas;
        
        for(int i = 0; i < listaRespuestas.size();i++){
            if(listaRespuestas.get(i).getRespuestaDada().equals("Ninguna")){
                preguntasContestadas -= 1;
            }
        }
        
        return preguntasContestadas;
    }
    
    int getPreguntasFalladas(){
        int preguntasFalladas = 0;
        
        for(int i = 0; i< listaRespuestas.size(); i++){
            String respuestaDada = "";
            if(listaRespuestas.get(i).getRespuestaDada().substring(listaRespuestas.get(i).getRespuestaDada().length() - 4, listaRespuestas.get(i).getRespuestaDada().length()).equals("null")){
                respuestaDada = listaRespuestas.get(i).getRespuestaDada().substring(0, listaRespuestas.get(i).getRespuestaDada().length() - 4);
            }else{respuestaDada = listaRespuestas.get(i).getRespuestaDada();}
            
            if(!respuestaDada.equals(listaRespuestas.get(i).getRespuestaCorrecta())){
                preguntasFalladas += 1;
            }
        }
        
        return preguntasFalladas;
    }
    
    ArrayList<Pregunta> desordenarArrayPreguntas() {
 
        arrayPreguntas = new Pregunta[numeroDePreguntas];
        arrayPreguntas = listaPreguntas.toArray(arrayPreguntas);
        
        Random r = new Random();
        
        // 1¬∫ m√©todo: posici√≥n aleatoria
        for (int i=0; i<arrayPreguntas.length; i++) {
            int posAleatoria = r.nextInt(arrayPreguntas.length);
            Pregunta temp = arrayPreguntas[i];
            arrayPreguntas[i] = arrayPreguntas[posAleatoria];
            arrayPreguntas[posAleatoria] = temp;
        }
 
        // 2¬∫ m√©todo: Collection.shuffle
        List<Pregunta> lista = Arrays.asList(arrayPreguntas);
        Collections.shuffle(lista);
 
        lista.toArray(arrayPreguntas);
        
        ArrayList<Pregunta> arrayListPreguntas = new ArrayList<Pregunta>();
        for(Pregunta text:arrayPreguntas) {
           arrayListPreguntas.add(text);
        }
        
        return arrayListPreguntas;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FRAME_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FRAME_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FRAME_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FRAME_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FRAME_test().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnPosterior;
    private javax.swing.JButton btnTest;
    private javax.swing.JMenu jMenuEdicion;
    private javax.swing.JLabel lblAvisoIniciarTest;
    private javax.swing.JMenuItem menuAdministrador;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuDesactivarAdmin;
    private javax.swing.JPanel panelControlador;
    private javax.swing.JPanel pnlBotones;
    // End of variables declaration//GEN-END:variables
}
